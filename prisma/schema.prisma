// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  email              String              @unique
  role               UserRoles
  status             Status
  password           String
  customer           Customer?           @relation(fields: [customerId], references: [id])
  customerId         String?
  historyLog         HistoryLog[]
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime?           @updatedAt @map("updated_at")
  projectUpdates     ProjectUpdates[]
  notifications      Notification[]
  verificationTokens VerificationToken[]
  comments           Comments[]
  reactions          Reaction[]          @relation("userReactions")
  department         Department?         @relation(fields: [departmentId], references: [id])
  departmentId       String?

  @@map("users")
}

model ListProjects {
  id         String    @id @default(uuid())
  name       String
  projects   Project[]
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId String
  status     Status
  order      Int       @default(0)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  isDone     Boolean   @default(false)

  @@map("list_projects")
}

model Customer {
  id                    String               @id @default(uuid())
  name                  String               @unique
  corporateName         String               @unique // Razão Social
  cnpj                  String               @unique
  contractDuration      String?
  contractValue         Float?
  paymentMethods        PaymentMethod?
  accumulatedInvestment Float? // Investimento Acumulado
  expenditureProjection Float? // Projeção de gastos
  contractObjective     String? // Objetivo do contrato
  contractedServices    String? // serviços contratados
  createdAt             DateTime
  updatedAt             DateTime?
  status                Status
  responsibleParties    ResponsibleParties[]
  projects              Project[]
  users                 User[]
  reports               Report[]
  address               CustomerAddress[]
  ListProjects          ListProjects[]
  tags                  Tag[]

  @@map("customers")
}

model PeriodicReports {
  id        String    @id @default(uuid())
  name      String
  month     String
  year      String
  url       String
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  status    Status
  createdAt DateTime
  updatedAt DateTime?

  @@map("periodic_reports")
}

model CustomerAddress {
  id           String    @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  zipCode      String
  customer     Customer  @relation(fields: [customerId], references: [id])
  customerId   String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  @@map("customer_address")
}

model ResponsibleParties {
  id                     String                   @id @default(uuid())
  firstName              String
  lastName               String
  phone                  String
  email                  String                   @unique
  birthdate              DateTime
  responsiblePartiesRole ResponsiblePartiesRole[]
  customer               Customer                 @relation(fields: [customerId], references: [id])
  customerId             String
  status                 Status
  createdAt              DateTime
  updatedAt              DateTime?

  @@map("responsible_parties")
}

model Tag {
  id         String    @id @default(uuid())
  name       String
  color      String
  status     Status
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId String
  createdAt  DateTime
  updatedAt  DateTime?
  projects   Project[]

  @@map("tags")
}

model Project {
  id                                   String            @id @default(uuid())
  name                                 String
  start                                DateTime?
  deadline                             DateTime?
  status                               StatusProject
  customer                             Customer          @relation(fields: [customerId], references: [id])
  customerId                           String
  createdAt                            DateTime
  updatedAt                            DateTime?
  updatedListProjectAt                 DateTime?
  budget                               Float?
  historyLog                           HistoryLog[]
  projectUpdates                       ProjectUpdates[]
  budgetExpenses                       BudgetExpense[]
  periodicReports                      PeriodicReports[]
  listProjects                         ListProjects      @relation(fields: [listProjectsId], references: [id])
  listProjectsId                       String
  shouldShowInformationsToCustomerUser Boolean           @default(true)
  finishedAt                           DateTime?
  tags                                 Tag[]
  description                          String?

  @@map("projects")
}

model Department {
  id          String       @id @default(uuid())
  name        String
  description String?
  users       User[]
  permissions Permission[]
  status      Status

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("departments")
}

enum Permission {
  VIEW_REPORT
  VIEW_PROJECT
  VIEW_FINANCIAL
  CREATE_COMMENT
  CREATE_REACTION
}

model BudgetExpense {
  id          String   @id @default(uuid())
  title       String
  description String?
  amount      Float
  createdAt   DateTime @default(now())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  status      Status   @default(ACTIVE)

  @@map("budget_expenses")
}

model ProjectUpdates {
  id            String         @id @default(uuid())
  description   String
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime
  updatedAt     DateTime?
  status        Status
  notifications Notification[]
  comments      Comments[]
  reactions     Reaction[]

  @@map("project_updates")
}

model Reaction {
  id              String          @id @default(uuid())
  userId          String
  projectUpdateId String?
  commentId       String?
  emojiId         String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt
  status          Status
  messageId       String?
  comment         Comments?       @relation(fields: [commentId], references: [id])
  emoji           Emoji           @relation(fields: [emojiId], references: [id])
  post            ProjectUpdates? @relation(fields: [projectUpdateId], references: [id])
  user            User            @relation("userReactions", fields: [userId], references: [id])

  @@unique([userId, projectUpdateId])
  @@unique([userId, commentId])
}

model Emoji {
  id        String     @id @default(uuid())
  unified   String     @unique
  name      String
  category  String
  char      String?
  reactions Reaction[]
}

model Comments {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  authorId        String    @map("author_id")
  projectUpdateId String    @map("project_update_id")
  status          Status

  author        User           @relation(fields: [authorId], references: [id])
  projectUpdate ProjectUpdates @relation(fields: [projectUpdateId], references: [id])
  reactions     Reaction[]

  @@map("comments")
}

model Notification {
  id               String          @id @default(uuid())
  recipient        User            @relation(fields: [recipientId], references: [id])
  recipientId      String
  title            String
  content          String
  readAt           DateTime?       @map("read_at")
  createdAt        DateTime        @default(now()) @map("created_at")
  projectUpdates   ProjectUpdates? @relation(fields: [projectUpdatesId], references: [id])
  projectUpdatesId String?

  @@map("notifications")
}

model Report {
  id             String       @id @default(uuid())
  name           String
  pbiReportId    String
  pbiWorkspaceId String
  status         Status
  customer       Customer     @relation(fields: [customerId], references: [id])
  customerId     String
  // metrics        Metric[]
  createdAt      DateTime
  updatedAt      DateTime?
  HistoryLog     HistoryLog[]

  @@map("reports")
}

// model Metric {
//   id        String    @id @default(uuid())
//   key       String
//   value     String
//   report    Report    @relation(fields: [reportId], references: [id])
//   reportId  String
//   createdAt DateTime
//   updatedAt DateTime?
// }

// model Integration {
//   id              String          @id @default(uuid())
//   integrationName IntegrationName
//   project         Project         @relation(fields: [projectId], references: [id])
//   projectId       String
//   createdAt       DateTime
//   updatedAt       DateTime?
// }

model HistoryLog {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  project   Project?         @relation(fields: [projectId], references: [id])
  projectId String?
  report    Report?          @relation(fields: [reportId], references: [id])
  reportId  String?
  action    HistoryLogAction
  createdAt DateTime

  @@map("history_logs")
}

model VerificationToken {
  id        String                @id @default(uuid())
  user      User                  @relation(fields: [userId], references: [id])
  userId    String
  token     String                @unique
  type      VerificationTokenType
  createAt  DateTime
  updatedAt DateTime?

  @@map("verification_tokens")
}

enum VerificationTokenType {
  RESET_PASSWORD
}

enum HistoryLogAction {
  ACCESS_REPORT
  ACCESS_INFO
  BUDGET_EXPENSE
}

enum IntegrationName {
  OPERAND
  MONDAY
  INSTAGRAM
  CALENDAR
}

enum UserRoles {
  INTERNAL_MANAGEMENT
  INTERNAL_PARTNERS
  INTERNAL_FINANCIAL_LEGAL
  CLIENT_RESPONSIBLE
  CLIENT_OWNER
  CLIENT_USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ResponsiblePartiesRole {
  INFLUENCERS
  CODE
  RISKMANAGEMENT
  OWNER
}

enum StatusProject {
  ACTIVE
  INACTIVE
  DONE
}

enum PaymentMethod {
  CREDIT_CARD
  PIX
}
